L.codeReading
===============================

----

Leaflet を読もう
=============================

.. raw:: html
 
 <div id='map' style='height: 500px'>hoge</div>
 <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
 <script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
 <script type='text/javascript'>
 var map = L.map('map').setView([51.505, -0.09], 13);
 
 L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
     attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
 }).addTo(map);
 
 L.marker([51.5, -0.09]).addTo(map)
     .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
     .openPopup();
 </script>

----

Javascript と私
================================

----

Javscript が嫌いな理由
=========================

1. DOM とかよくわからない
2. イベントの伝播わからない
3. やれ new は使うな、関数型だオブジェクト指向だ、スタイルとポリシーが人それぞれ過ぎてつらい
4. そもそも HTML と CSS がわからない
5. ブラウザによっていろいろあれ
6. デザインセンスがないから出来上がったものがゴミ
7. 開発環境全般がなんか面倒くさい
8. Javascript 書いている人がなんかリア充
9. 一生懸命 API 作ったのにぐりぐり動く画面作った人の方が褒められる

----

つまり
==========

----

Javascript に恨みは無い
===========================

----

ここから真面目に
===================

----

プログラミング言語全般に言えること
========================================

言語仕様を知っていても開発はできない
========================================

- Java を知っていても Android アプリは作れません。
- Python を知っていても ArcMap の AddInn は作れません。
- Javascript を知っていても Web Map は作れません。

----

L.codeReading のモチベーション
==================================

- Javascript のモダンなコーディングスタイルと、開発スタイルを身に着ける
- オープンな開発プロセスを知る
  
  - なんならコミットしちゃおう
- サクッと空間データを美しく表現する手段を手に入れる
- ブラウザで地図を表現するときの技術要素をとらえる
  
  - なぜ地図をスクロールすることができるのか？

----


なぜ Leaflet？
===============================

ArcGIS API for Javascript ではダメなんですか?
-----------------------------------------------------

- いや、ソース読めないから
- dojo.... え？

Leaflet の利点
----------------------------

- Esri も担いでるから波風立たない
- 新しい技術を試したいときに、対応していなくても OSS だらからなんとかなる
  
  - Ext を自分で作れる力量を得よう
- 流行ってる

----

進め方
==================

形式
----------------  

- 輪講

開催頻度
---------------

- 1回 / 2週間～3週間

時間
----------

- 1.5 - 2 h 程度

----

進め方詳細案
=====================

- 各回にファシリテータを持ち回りで指名
- 対象部分を開催日までに全員が熟読する
  
  - 範囲はファシリテータが事前にメンバーに通告
- 基本はディスカッション形式
  
  - ファシリテータは対象部分の要点を資料にまとめ議論の種を提供する: 以下例
    
    - Javscript のコーディングで肝となるところ
    - 空間情報を扱う上で肝となるところ
    - 自動テスト、デプロイで重要な手法
    - Leaflet ではこういう手法だけど、最近のトレンドはこうみたい

- ファシリテータ以外のメンバーも気づきやポイントをまとめておくとよい
  
  - 資料
  - DEMO
  
----

成果の共有
======================

考え中。

成果物を何らかの形で外に公開したい。





